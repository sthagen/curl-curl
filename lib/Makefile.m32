#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 1999 - 2022, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
#***************************************************************************

###########################################################################
#
# Makefile for building libcurl.a with MinGW and optional features.
#
# Usage:   mingw32-make -f Makefile.m32 CFG=-feature1[-feature2][-feature3][...]
# Example: mingw32-make -f Makefile.m32 CFG=-zlib-ssl-sspi-winidn
#
# Hint: you can also set environment vars to control the build, e.g.:
# set ZLIB_PATH=C:/zlib
# set ZLIB=1
#
###########################################################################

PROOT = ..

ifndef ZLIB_PATH
ZLIB_PATH = $(PROOT)/../zlib
endif
ifndef ZSTD_PATH
ZSTD_PATH = $(PROOT)/../zstd
endif
ifndef BROTLI_PATH
BROTLI_PATH = $(PROOT)/../brotli
endif
ifndef OPENSSL_PATH
OPENSSL_PATH = $(PROOT)/../openssl
endif
ifndef LIBSSH2_PATH
LIBSSH2_PATH = $(PROOT)/../libssh2
endif
ifndef LIBRTMP_PATH
LIBRTMP_PATH = $(PROOT)/../librtmp
endif
ifndef LIBGSASL_PATH
LIBGSASL_PATH = $(PROOT)/../gsasl
endif
ifndef LIBIDN2_PATH
LIBIDN2_PATH = $(PROOT)/../libidn2
endif
ifndef NGHTTP2_PATH
NGHTTP2_PATH = $(PROOT)/../nghttp2
endif
ifndef NGHTTP3_PATH
NGHTTP3_PATH = $(PROOT)/../nghttp3
endif
ifndef NGTCP2_PATH
NGTCP2_PATH = $(PROOT)/../ngtcp2
endif
ifndef LIBCARES_PATH
LIBCARES_PATH = $(PROOT)/../c-ares
endif

ifeq ($(CURL_CC),)
CURL_CC := $(CROSSPREFIX)gcc
endif
ifeq ($(CURL_AR),)
CURL_AR := $(CROSSPREFIX)ar
endif
ifeq ($(CURL_RANLIB),)
CURL_RANLIB := $(CROSSPREFIX)ranlib
endif
ifeq ($(CURL_RC),)
CURL_RC := $(CROSSPREFIX)windres
endif
ifeq ($(CURL_STRIP),)
CURL_STRIP := $(CROSSPREFIX)strip
endif

CC = $(CURL_CC)
CFLAGS = -O3 $(CURL_CFLAG_EXTRAS) -W -Wall
LDFLAGS = $(CURL_LDFLAG_EXTRAS) $(CURL_LDFLAG_EXTRAS_DLL)
AR = $(CURL_AR)
RANLIB = $(CURL_RANLIB)
RC = $(CURL_RC)
RCFLAGS = -I$(PROOT)/include -O coff $(CURL_RCFLAG_EXTRAS)
STRIP   = $(CURL_STRIP) -g

# Set environment var ARCH to your architecture to override autodetection.
ifndef ARCH
ifeq ($(findstring x86_64,$(shell $(CC) -dumpmachine)),x86_64)
ARCH = w64
else
ARCH = w32
endif
endif

ifneq ($(ARCH),custom)
ifeq ($(ARCH),w64)
CFLAGS  += -m64
LDFLAGS += -m64
RCFLAGS += --target=pe-x86-64
else
CFLAGS  += -m32
LDFLAGS += -m32
RCFLAGS += --target=pe-i386
endif
endif

# Platform-dependent helper tool macros
ifeq ($(findstring /sh,$(SHELL)),/sh)
DEL     = rm -f $1
RMDIR   = rm -fr $1
MKDIR   = mkdir -p $1
COPY    = -cp -afv $1 $2
COPYR   = -rsync -aC $1/* $2
TOUCH   = touch $1
CAT     = cat
ECHONL  = echo ""
DL = '
else
ifeq "$(OS)" "Windows_NT"
DEL     = -del 2>NUL /q /f $(subst /,\,$1)
RMDIR   = -rd 2>NUL /q /s $(subst /,\,$1)
else
DEL     = -del 2>NUL $(subst /,\,$1)
RMDIR   = -deltree 2>NUL /y $(subst /,\,$1)
endif
MKDIR   = -md 2>NUL $(subst /,\,$1)
COPY    = -copy 2>NUL /y $(subst /,\,$1) $(subst /,\,$2)
COPYR   = -xcopy 2>NUL /q /y /e $(subst /,\,$1) $(subst /,\,$2)
TOUCH   = copy 2>&1>NUL /b $(subst /,\,$1) +,,
CAT     = type
ECHONL  = $(ComSpec) /c echo.
endif

########################################################
## Nothing more to do below this line!

ifneq ($(findstring -dyn,$(CFG)),)
DYN = 1
endif
ifneq ($(findstring -ares,$(CFG)),)
ARES = 1
endif
ifneq ($(findstring -sync,$(CFG)),)
SYNC = 1
endif
ifneq ($(findstring -rtmp,$(CFG)),)
RTMP = 1
ZLIB = 1
endif
ifneq ($(findstring -ssh2,$(CFG)),)
SSH2 = 1
ZLIB = 1
endif
ifneq ($(findstring -ssl,$(CFG)),)
SSL = 1
endif
ifneq ($(findstring -srp,$(CFG)),)
SRP = 1
endif
ifneq ($(findstring -zlib,$(CFG)),)
ZLIB = 1
endif
ifneq ($(findstring -zstd,$(CFG)),)
ZSTD = 1
endif
ifneq ($(findstring -brotli,$(CFG)),)
BROTLI = 1
endif
ifneq ($(findstring -gsasl,$(CFG)),)
GSASL = 1
endif
ifneq ($(findstring -idn2,$(CFG)),)
IDN2 = 1
endif
ifneq ($(findstring -winidn,$(CFG)),)
WINIDN = 1
endif
ifneq ($(findstring -sspi,$(CFG)),)
SSPI = 1
endif
ifneq ($(findstring -ldaps,$(CFG)),)
LDAPS = 1
endif
ifneq ($(findstring -ipv6,$(CFG)),)
IPV6 = 1
endif
ifneq ($(findstring -schannel,$(CFG))$(findstring -winssl,$(CFG)),)
SCHANNEL = 1
SSPI = 1
endif
ifneq ($(findstring -nghttp2,$(CFG)),)
NGHTTP2 = 1
endif
ifneq ($(findstring -nghttp3,$(CFG)),)
NGHTTP3 = 1
endif
ifneq ($(findstring -ngtcp2,$(CFG)),)
NGTCP2 = 1
endif
ifneq ($(findstring -unicode,$(CFG)),)
UNICODE = 1
endif

# SSH2 and RTMP require an SSL library; assume OpenSSL if none specified
ifneq ($(SSH2)$(RTMP),)
  ifeq ($(SSL)$(SCHANNEL),)
    SSL = 1
  endif
endif

INCLUDES = -I. -I$(PROOT)/include
CFLAGS += -DBUILDING_LIBCURL
ifdef SSL
  ifdef SCHANNEL
    CFLAGS += -DCURL_WITH_MULTI_SSL
  endif
endif
ifdef UNICODE
  CFLAGS += -DUNICODE -D_UNICODE
endif

ifdef SYNC
  CFLAGS += -DUSE_SYNC_DNS
else
  ifdef ARES
    INCLUDES += -I"$(LIBCARES_PATH)"
    CFLAGS += -DUSE_ARES -DCARES_STATICLIB
    curl_LDADD += -L"$(LIBCARES_PATH)" -lcares
  endif
endif
ifdef RTMP
  INCLUDES += -I"$(LIBRTMP_PATH)"
  CFLAGS += -DUSE_LIBRTMP
  curl_LDADD += -L"$(LIBRTMP_PATH)/librtmp" -lrtmp -lwinmm
endif
ifdef NGHTTP2
  INCLUDES += -I"$(NGHTTP2_PATH)/include"
  CFLAGS += -DUSE_NGHTTP2
  curl_LDADD += -L"$(NGHTTP2_PATH)/lib" -lnghttp2
endif
ifdef SSH2
  INCLUDES += -I"$(LIBSSH2_PATH)/include" -I"$(LIBSSH2_PATH)/win32"
  CFLAGS += -DUSE_LIBSSH2 -DHAVE_LIBSSH2_H
  curl_LDADD += -L"$(LIBSSH2_PATH)/win32" -lssh2
endif
ifdef NGHTTP3
  INCLUDES += -I"$(NGHTTP3_PATH)/include"
  CFLAGS += -DUSE_NGHTTP3
  curl_LDADD += -L"$(NGHTTP3_PATH)/lib" -lnghttp3
  ifdef NGTCP2
    INCLUDES += -I"$(NGTCP2_PATH)/include"
    CFLAGS += -DUSE_NGTCP2
    curl_LDADD += -L"$(NGTCP2_PATH)/lib"
    ifdef NGTCP2_LIBS
      curl_LDADD += $(NGTCP2_LIBS)
    else
      curl_LDADD += -lngtcp2
      ifdef SSL
        curl_LDADD += -lngtcp2_crypto_openssl
      endif
    endif
  endif
endif
ifdef SSL
  ifndef OPENSSL_INCLUDE
    OPENSSL_INCLUDE = $(OPENSSL_PATH)/include
  endif
  ifndef OPENSSL_LIBPATH
    OPENSSL_LIBS = -lssl -lcrypto
    OPENSSL_LIBPATH = $(OPENSSL_PATH)/lib
  endif
  INCLUDES += -I"$(OPENSSL_INCLUDE)"
  CFLAGS += -DUSE_OPENSSL
  curl_LDADD += -L"$(OPENSSL_LIBPATH)" $(OPENSSL_LIBS)
  ifdef SRP
    ifeq "$(wildcard $(OPENSSL_INCLUDE)/openssl/srp.h)" "$(OPENSSL_INCLUDE)/openssl/srp.h"
      # OpenSSL 1.0.1 and later, except BoringSSL
      CFLAGS += -DHAVE_OPENSSL_SRP -DUSE_TLS_SRP
    endif
  endif
endif
ifdef SCHANNEL
  CFLAGS += -DUSE_SCHANNEL
endif
ifdef ZLIB
  INCLUDES += -I"$(ZLIB_PATH)"
  CFLAGS += -DHAVE_LIBZ -DHAVE_ZLIB_H
  curl_LDADD += -L"$(ZLIB_PATH)" -lz
endif
ifdef ZSTD
  INCLUDES += -I"$(ZSTD_PATH)/include"
  CFLAGS += -DHAVE_ZSTD
  curl_LDADD += -L"$(ZSTD_PATH)/lib"
  ifdef ZSTD_LIBS
    curl_LDADD += $(ZSTD_LIBS)
  else
    curl_LDADD += -lzstd
  endif
endif
ifdef BROTLI
  INCLUDES += -I"$(BROTLI_PATH)/include"
  CFLAGS += -DHAVE_BROTLI
  curl_LDADD += -L"$(BROTLI_PATH)/lib"
  ifdef BROTLI_LIBS
    curl_LDADD += $(BROTLI_LIBS)
  else
    curl_LDADD += -lbrotlidec
  endif
endif
ifdef GSASL
  INCLUDES += -I"$(LIBGSASL_PATH)/include"
  CFLAGS += -DUSE_GSASL
  curl_LDADD += -L"$(LIBGSASL_PATH)/lib" -lgsasl
endif
ifdef IDN2
  INCLUDES += -I"$(LIBIDN2_PATH)/include"
  CFLAGS += -DUSE_LIBIDN2
  curl_LDADD += -L"$(LIBIDN2_PATH)/lib" -lidn2
else
ifdef WINIDN
  CFLAGS += -DUSE_WIN32_IDN
  CFLAGS += -DWANT_IDN_PROTOTYPES
  curl_LDADD += -lnormaliz
endif
endif
ifdef SSPI
  CFLAGS += -DUSE_WINDOWS_SSPI
endif
ifdef SPNEGO
  CFLAGS += -DHAVE_SPNEGO
endif
ifdef IPV6
  CFLAGS += -DENABLE_IPV6
endif
ifdef LDAPS
  CFLAGS += -DHAVE_LDAP_SSL
endif
ifeq ($(findstring -lldap,$(LDFLAGS)),)
  curl_LDADD += -lwldap32
endif
curl_LDADD += -lws2_32 -lcrypt32 -lbcrypt

# Makefile.inc provides the CSOURCES and HHEADERS defines
include Makefile.inc

ifeq ($(CURL_DLL_A_SUFFIX),)
CURL_DLL_A_SUFFIX := dll
endif

libcurl_dll_LIBRARY = libcurl$(CURL_DLL_SUFFIX).dll
libcurl_dll_a_LIBRARY = libcurl$(CURL_DLL_A_SUFFIX).a
libcurl_a_LIBRARY = libcurl.a

libcurl_a_OBJECTS := $(patsubst %.c,%.o,$(strip $(CSOURCES)))
libcurl_a_DEPENDENCIES := $(strip $(CSOURCES) $(HHEADERS))

RESOURCE = libcurl.res


all: $(libcurl_a_LIBRARY) $(libcurl_dll_LIBRARY)

$(libcurl_a_LIBRARY): $(libcurl_a_OBJECTS) $(libcurl_a_DEPENDENCIES)
	@$(call DEL, $@)
	$(AR) cru $@ $(libcurl_a_OBJECTS)
	$(RANLIB) $@
	$(STRIP) $@

# remove the last line above to keep debug info

$(libcurl_dll_LIBRARY): $(libcurl_a_OBJECTS) $(RESOURCE)
	@$(call DEL, $@)
	$(CC) $(LDFLAGS) -shared -o $@ $(libcurl_a_OBJECTS) $(RESOURCE) $(curl_LDADD) \
	  -Wl,--output-def,$(@:.dll=.def),--out-implib,$(libcurl_dll_a_LIBRARY)

%.o: %.c
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@

%.res: %.rc
	$(RC) $(RCFLAGS) -i $< -o $@

clean:
	@$(call DEL, $(libcurl_a_OBJECTS) $(RESOURCE))

distclean vclean: clean
	@$(call DEL, $(libcurl_a_LIBRARY) $(libcurl_dll_LIBRARY) $(libcurl_dll_LIBRARY:.dll=.def) $(libcurl_dll_a_LIBRARY))
